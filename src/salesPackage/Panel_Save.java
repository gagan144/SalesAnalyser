/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Panel_Admin_Tool.java
 *
 * Created on Mar 3, 2012, 2:59:52 PM
 */
package salesPackage;

import java.awt.CardLayout;
import java.io.*;
import java.nio.channels.FileChannel;
import java.util.Calendar;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;

/**
 *
 * @author user
 */

class PDFFilter extends javax.swing.filechooser.FileFilter {
      public boolean accept(File f) {

        return f.isFile() || f.getName().toLowerCase().endsWith(".pdf");
      }

      public String getDescription() {
        return "*.pdf";
      }
    }




public class Panel_Save extends javax.swing.JPanel {

    /** Creates new form Panel_Admin_Tool */
    
    Configuration cnf = new Configuration();
    DatabaseHandler db = new DatabaseHandler();
    StrageticData userD;
    PanelSet_Ques psq_ref;
    LogHandler log=new LogHandler();   
    
    int dbFlag=1;
    
    
    public Panel_Save() {
        initComponents();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        chk_save = new javax.swing.JCheckBox();
        lbl_source = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        Btn_save = new javax.swing.JButton();
        chk_pdf = new javax.swing.JCheckBox();
        textF_path = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btn_getPath = new javax.swing.JButton();
        lbl_lastBk = new javax.swing.JLabel();
        chk_bk = new javax.swing.JCheckBox();
        borders = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();

        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser.setDialogTitle("Save PDF FIle");
        fileChooser.setFileHidingEnabled(false);
        fileChooser.setMaximumSize(new java.awt.Dimension(800, 600));
        fileChooser.setMinimumSize(new java.awt.Dimension(400, 300));
        fileChooser.setName("Save PDF");
        fileChooser.setPreferredSize(new java.awt.Dimension(500, 400));

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(900, 540));
        setLayout(null);

        chk_save.setForeground(new java.awt.Color(0, 102, 51));
        chk_save.setText("I dont want to save data to this destination!");
        chk_save.setContentAreaFilled(false);
        chk_save.setFocusPainted(false);
        chk_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_saveActionPerformed(evt);
            }
        });
        add(chk_save);
        chk_save.setBounds(590, 185, 250, 22);

        lbl_source.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/database.png"))); // NOI18N
        add(lbl_source);
        lbl_source.setBounds(490, 180, 90, 90);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Save Record to currently connected \ndatabase with DSN : ");
        jTextArea1.setOpaque(false);
        add(jTextArea1);
        jTextArea1.setBounds(600, 220, 230, 50);

        Btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/settings/save_1.png"))); // NOI18N
        Btn_save.setBorderPainted(false);
        Btn_save.setContentAreaFilled(false);
        Btn_save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Btn_save.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/settings/save_4.png"))); // NOI18N
        Btn_save.setFocusPainted(false);
        Btn_save.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/settings/save_3.png"))); // NOI18N
        Btn_save.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/settings/save_2.png"))); // NOI18N
        Btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_saveActionPerformed(evt);
            }
        });
        add(Btn_save);
        Btn_save.setBounds(485, 498, 90, 31);

        chk_pdf.setForeground(new java.awt.Color(0, 102, 51));
        chk_pdf.setText("Create PDF File");
        chk_pdf.setContentAreaFilled(false);
        chk_pdf.setFocusPainted(false);
        chk_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_pdfActionPerformed(evt);
            }
        });
        add(chk_pdf);
        chk_pdf.setBounds(155, 185, 160, 22);

        textF_path.setEditable(false);
        textF_path.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 120, 73)));
        add(textF_path);
        textF_path.setBounds(160, 235, 250, 20);

        jLabel12.setText("PDF file Path :");
        add(jLabel12);
        jLabel12.setBounds(160, 215, 90, 20);

        btn_getPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/setPath_1.png"))); // NOI18N
        btn_getPath.setBorderPainted(false);
        btn_getPath.setContentAreaFilled(false);
        btn_getPath.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_getPath.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/setPath_4.png"))); // NOI18N
        btn_getPath.setFocusPainted(false);
        btn_getPath.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/setPath_3.png"))); // NOI18N
        btn_getPath.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/setPath_2.png"))); // NOI18N
        btn_getPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getPathActionPerformed(evt);
            }
        });
        add(btn_getPath);
        btn_getPath.setBounds(320, 265, 91, 24);

        lbl_lastBk.setForeground(new java.awt.Color(254, 0, 0));
        lbl_lastBk.setText("Last Backup created on :");
        add(lbl_lastBk);
        lbl_lastBk.setBounds(50, 380, 210, 20);

        chk_bk.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chk_bk.setText("Create backup of current database before saving record to database. (Recommended)");
        chk_bk.setOpaque(false);
        chk_bk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_bkActionPerformed(evt);
            }
        });
        add(chk_bk);
        chk_bk.setBounds(110, 340, 600, 23);

        borders.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/Panel_save_bg.png"))); // NOI18N
        add(borders);
        borders.setBounds(0, 0, 900, 540);

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/panel_bg_trans.png"))); // NOI18N
        bg.setFocusable(false);
        add(bg);
        bg.setBounds(0, 0, 900, 540);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_getPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getPathActionPerformed
        // TODO add your handling code here:     
        String path="";        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) 
        { 
            path=fileChooser.getSelectedFile().getAbsolutePath();
            
            //check path
            String p="",ext="";
            StringTokenizer st =new StringTokenizer(path,".");
            try
            {               
                   p=st.nextToken();
                   ext=st.nextToken();                   
               
               if(ext.equals(".pdf"))
               {}
               else
               { path=p+".pdf"; }
               
            }catch(NoSuchElementException no)
            { path+=".pdf"; }
            
            textF_path.setText(path);
        }
        else 
        {  System.out.println("No Selection ");  }
       
    }//GEN-LAST:event_btn_getPathActionPerformed

    private void Btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_saveActionPerformed
        // TODO add your handling code here:
        saveSettings();        
    }//GEN-LAST:event_Btn_saveActionPerformed

    private void chk_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_pdfActionPerformed
        // TODO add your handling code here:
        if(chk_pdf.isSelected()==false)
        {   
            //chkDSN();
            textF_path.setText("");
            btn_getPath.setEnabled(false);            
            
        }else
        {            
            textF_path.setText("");
            btn_getPath.setEnabled(true);            
        }
        
        disableSaveBtn();
        
    }//GEN-LAST:event_chk_pdfActionPerformed

    private void chk_bkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_bkActionPerformed
        // TODO add your handling code here:
        disableSaveBtn();
    }//GEN-LAST:event_chk_bkActionPerformed

    private void chk_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_saveActionPerformed
        // TODO add your handling code here:
        disableSaveBtn();
    }//GEN-LAST:event_chk_saveActionPerformed

    private void createBackup()
    {
        File sou=new File(db.workBook);        
        if(sou.exists()==false)
        {
            SPA.panelController("Database connectivity Error! Cannot find Workbook!", new int[]{1, 0, 2, 3, 4, 0});
        }
        else
        {
            log.writeToLog(23);
            Calendar cal= Calendar.getInstance();
            int month = cal.get(Calendar.MONTH);
            int year = cal.get(Calendar.YEAR);
            int day = cal.get(Calendar.DAY_OF_MONTH); 
            int hour= cal.get(Calendar.HOUR);
            int min= cal.get(Calendar.MINUTE);
            cnf.lastBackupDate=day+"/"+(month + 1)+"/"+year+", "+hour+":"+min;
            lbl_lastBk.setText("Last Backup created on : "+cnf.lastBackupDate); 
            
            //copy excel file
            File dirPath=new File("Data\\Backup");
            if(dirPath.exists()==false)
            {
                //System.out.println(dirPath.mkdirs());
                dirPath.mkdirs();
            }
               
            
            File dest= new File("Data\\Backup\\backup.xls");
        
            FileChannel source = null;
            FileChannel destination = null;
        
            try 
            {
                source = new FileInputStream(sou).getChannel();
                destination = new FileOutputStream(dest).getChannel();            
            }catch(FileNotFoundException fnfe)
            {
                System.out.println(fnfe);
            }
        
            
            try
            {   
                long count = 0;
                long size = source.size();              
                while((count += destination.transferFrom(source, 0, size-count))<size);
                
                source.close();
                destination.close();
                
                cnf.writeConfigFile();                                                
                log.writeToLog(31);
            
            }catch(IOException ioe)
            {  
                log.writeToLog(33);
                SPA.panelController("An Error occured while creating backup! Please try Later!", new int[]{2, 0, 5, 3, 4, 0});
            }  
            
        }
    }
    
    private void chkDSN()
    {
        DatabaseHandler tmpDb=new DatabaseHandler();
        tmpDb.dataSourceName=db.dataSourceName;
        
        int db_chk=dbFlag=tmpDb.checkConnection();        
        
        
        if( (db_chk==0 || db_chk==-1) || SPA.loggedIn==false)
        {            
            jTextArea1.setText("The database is either not connected or\nyou have not logged in as an admin.\nAll Records will be saved in inbox.");
            lbl_source.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/inbox.png")));
                        
        }        
        else
        {
            jTextArea1.setText("Save Record to currently connected \ndatabase with DSN : "+db.dataSourceName);  
            lbl_source.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salesPackage/Images/database.png")));
        }
    }
    
        
    private void saveSettings()
    {
        boolean pdf=false,exit=true;        
        String pdfPath="";
                
        //pdf check
        if(chk_pdf.isSelected()==true)
        {
            if(textF_path.getText().equals(""))
            {  
                pdf=false;
                Dialog_reg_child d=new Dialog_reg_child(null, true);
                d.getMessage("Please select a path where you\nwant to save your pdf File!",2);
                d.setVisible(true); 
                exit=false;                
                return;
            }
            else
            {  
               pdf=true;
               exit=true;
            }
        }else
        {  pdf=false; exit=true; }
        
              
        //SAVE ALL DATA
        if(pdf==true)
        {            
            PDFGenerator pdfGen= new PDFGenerator();
            exit=pdfGen.generate(userD, new File(textF_path.getText()));
            System.out.println("PDF Created");              
        }
                
        if(chk_bk.isSelected()==true)
        {
            createBackup();
            System.out.println("Backup Created!");
        }
        
        InboxHandler inbox=new InboxHandler();
        if(chk_save.isSelected()==false)
        {
            chkDSN();
            if(dbFlag<=0 && SPA.loggedIn==true)
            { 
                Dialog_reg_child d=new Dialog_reg_child(null, true);
                d.getMessage("Error Conecting to Database!\nThe record will be saved in Inbox!",0);
                d.setVisible(true);    
                inbox.saveToInbox(userD.r);
                SPA.DIAGNOSE.virtualFlag++;
                
                d=new Dialog_reg_child(null, true);
                d.getMessage("All changes were saved\nsucccessfully. However we advise\nyou to restart!",-1);
                d.setVisible(true);    
                
            }else if(dbFlag<=0 || SPA.loggedIn==false)
            { 
                //userD.r.saveToVirtualDb(userD.r, new File("Inbox1.bin"));                
                inbox.saveToInbox(userD.r);
                SPA.DIAGNOSE.virtualFlag++;
                System.out.println("SAved to inbox!");
            }
            else
            {
                 System.out.println("SAved to Database");
                 if(SPA.mine==true)
                 {
                     try
                     {
                         userD.showData();
                         if(userD.r.checkAllData()==false)
                         {  throw new Exception(); }
                         db.updateRecord(userD.r);
                     }catch(Exception e)
                     { System.out.println("Incomplete Data!"); }
                     SPA.mine=false;
                 }
                 else
                 {
                     try
                     {
                         userD.showData();
                         if(userD.r.checkAllData()==false)
                         {  throw new Exception(); }
                         db.insertInto(userD.r);
                     }catch(Exception e)
                     { System.out.println("Incomplete Data!"); }
                     SPA.MAXRID++; 
                 }
            }
            
            //System.out.println("Now new MaxID is :"+SPA.MAXRID);
            
        }
        
        if(exit==true)
        {
            Dialog_reg_child d=new Dialog_reg_child(null, true);
            d.getMessage("All changes were saved\nsucccessfully.Click Ok to return\nto Main Menu!",2);
            d.setVisible(true);
            
            
            psq_ref.ResetAllPanels();
            CardLayout cl = (CardLayout)(psq_ref.getLayout()); 
            cl.first(psq_ref);
            //btn_back.setEnabled(false);  done in setVisibleCurrentPanel in 200
                        
        
            userD.ResetAllData();            
             
            

            if(SPA.loggedIn==false)
            { SPA.panelController(null, new int[]{0, 0, 0, 2, 0, 0}); }
            else
            { SPA.panelController(null, new int[]{0, 0, 0, 3, 0, 0}); }
        }
      
   
    }
    
    private void disableSaveBtn()
    {
        if(chk_pdf.isSelected()==false && chk_save.isSelected()==true && chk_bk.isSelected()==false)
        {
            Btn_save.setEnabled(false);
        }
        else
        {  Btn_save.setEnabled(true); }
        
    }
    
    void openPanel(DatabaseHandler d, Configuration c,StrageticData u,PanelSet_Ques p)
    {
        db=d;
        cnf=c;
        userD=u;
        psq_ref=p;
        
        chk_bk.setEnabled(SPA.loggedIn);
        
        //db
        chk_pdf.setSelected(false);
        chk_save.setSelected(false);
        chk_bk.setSelected(false);
        
        
        
        chkDSN();
        btn_getPath.setEnabled(false);                            
        textF_path.setText("");
        
        if(cnf.lastBackupDate.equals(""))
        { lbl_lastBk.setText("Last Backup created on : "+"----"); }
        else
        { lbl_lastBk.setText("Last Backup created on : "+cnf.lastBackupDate); }
        
    }
        
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_save;
    private javax.swing.JLabel bg;
    private javax.swing.JLabel borders;
    private javax.swing.JButton btn_getPath;
    private javax.swing.JCheckBox chk_bk;
    private javax.swing.JCheckBox chk_pdf;
    private javax.swing.JCheckBox chk_save;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl_lastBk;
    private javax.swing.JLabel lbl_source;
    private javax.swing.JTextField textF_path;
    // End of variables declaration//GEN-END:variables
}
